<%- include('header', {page: page}); -%>
  <div class="home">
    <div class="first-window" id="chat">
      <h1 class="title">Chat</h1>
      <div class="input-group mb-3 name" id="chat-div">
  <input type="text" class="form-control" placeholder="Connecting..." aria-label="Message" aria-describedby="button-addon2" id="mes" disabled maxlength="45">
  <button class="btn btn-outline-secondary" type="button" id="button-addon2" onclick="sendms()">Send</button>
</div>
<span id="blah"></span>
    </div>
    <div class="main-window">
    <h1 class="title">Militia.io - <%=version%></h1>
      <form class="form-group" action="/game" method="post">
      <h5 class="name" id="player1label">Name: </h5>
      <input class="name form-control" placeholder="Name" id="player1Input" name="name" type="text" required/>
        <select class="form-select" name="mode" id="mode" required onchange="player2Func()">
          <option value="sim">Simulation</option>
          <option value="ai">Single-player(Beta)</option>
          <option value="local" selected>Local 2 Player</option>
          <option value="local3">Local 3 Player(Laggy)</option>
          <option value="local4">Local 4 Player(Laggy)</option>
          <option value="online" disabled>Online Multiplayer(Coming Soon...)</option>
          
        </select>
        <h5 class="name" id="player2label">Player 2 Name: </h5>
      <input class="name form-control" placeholder="Player 2 Name" name="name2" id="player2Input" type="text" disabled/>
        <h5 class="name" id="player3label">Player 3 Name: </h5>
      <input class="name form-control" placeholder="Player 3 Name" name="name3" id="player3Input" type="text" disabled/>
        <h5 class="name" id="player4label">Player 4 Name: </h5>
      <input class="name form-control" placeholder="Player 4 Name" name="name4" id="player4Input" type="text" disabled/>
        <h5 class="name" id="aiLabel">Num Of AI's </h5>
      <input class="name form-control" placeholder="Min 1, Max 10" value="1" min="1" max="10" name="ai" id="aiInput" type="number" disabled/>
        <button type="submit" class="btn btn-outline-dark button">Play</button>
        </form>
      <div>
        <!--This part is coming later-->
      </div>
    </div>
    <div class="login-window">
    <h1 class="title">Login/Register</h1>
      <form class="form-group" action="/login" method="post">
      <h5 class="name">Username: </h5>
      <input class="name form-control" placeholder="Username" name="username" type="text" max="15"/>
      <h5 class="name">Password: </h5>
        <input class="name form-control" placeholder="Password" name="password" type="password"/>
        <button type="submit" class="btn btn-outline-secondary button" style="display: inline; float: left;">Login</button>
        </form>
      <button type="button" class="btn btn-link" style="display: inline; float: right; margin-right: 10%;" onclick="location.href='/register'">Register</button>
    </div>
  </div>
  <script>
    const chatNameExtension = new Date();
    document.cookie = chatNameExtension.getMilliseconds();
    const socket = new WebSocket('wss://militiaio.onrender.com/chat');
  socket.addEventListener('open', event => {
    document.getElementById("mes").disabled = false;
    document.getElementById("mes").placeholder = "Chat";
  console.log('WebSocket connection established');
  });
let mode = document.getElementById('mode');
let player1 = document.getElementById('player1Input');
let player1label = document.getElementById('player1label');
let player2 = document.getElementById('player2Input');
let player2label = document.getElementById('player2label');
let player3 = document.getElementById('player3Input');
let player3label = document.getElementById('player3label');
let player4 = document.getElementById('player4Input');
let player4label = document.getElementById('player4label');
let ai = document.getElementById('aiInput');
let aiLabel = document.getElementById('aiLabel');
function player2Func() {
  player2.disabled = true;
  player2.style.display = 'none';
  player2label.style.display = 'none';
  player3.disabled = true;
  player3.style.display = 'none';
  player3label.style.display = 'none';
  player4.disabled = true;
  player4.style.display = 'none';
  player4label.style.display = 'none';
  ai.disabled = true;
  ai.style.display = 'none';
  aiLabel.style.display = 'none';
  player1Input.disabled = false;
  player1Input.style.display = 'block';
  player1Input.require = true;
  player1label.style.display = 'block';
  if (mode.value === 'local'){
    player2.disabled = false;
    player2.style.display = 'block';
    player2label.style.display = 'block';
  } else if (mode.value === 'local3'){
    player2.disabled = false;
    player2.style.display = 'block';
    player2label.style.display = 'block';
    player3.disabled = false;
    player3.style.display = 'block';
    player3label.style.display = 'block';
  } else if (mode.value === 'local4'){
    player2.disabled = false;
    player2.style.display = 'block';
    player2label.style.display = 'block';
    player3.disabled = false;
    player3.style.display = 'block';
    player3label.style.display = 'block';
    player4.disabled = false;
    player4.style.display = 'block';
    player4label.style.display = 'block';
  } else if (mode.value === 'ai'){
    ai.disabled = false;
    ai.style.display = 'block';
    aiLabel.style.display = 'block';
  } else if (mode.value === 'sim'){
    ai.disabled = false;
    ai.style.display = 'block';
    aiLabel.style.display = 'block';
    player1Input.disabled = true;
    player1Input.style.display = 'none';
    player1Input.require = false;
    player1label.style.display = 'none';
  };
}
player2Func();
socket.addEventListener('message', event => {
  if (event.data !== '' && event.data.split(';')[9] !== 'type:gameMessage'){
  const messageDiv = document.createElement("p");
  messageDiv.innerText = event.data;
  messageDiv.className = "message";
  document.getElementById('chat').insertBefore(messageDiv, document.getElementById('blah'));
  if (document.getElementsByClassName('message').length >= 11){
  document.getElementsByClassName('message')[0].remove();
  };
  };
});
document.addEventListener('keypress', event => {
  if (event.code === "Enter"){
  sendms();
  };
});
socket.addEventListener('close', event => {
  console.log('WebSocket connection closed');
  document.getElementById("mes").placeholder = "Connection closed";
  document.getElementById("mes").disabled = true;
});

socket.addEventListener('error', error => {
  console.error(error);
  document.getElementById("mes").placeholder = "Error";
  document.getElementById("mes").disabled = true;
});
  function sendms(){
  if (document.getElementById('mes').value !== ""){
  socket.send("Guest" + document.cookie + ": " + document.getElementById('mes').value);
  document.getElementById('mes').value = "";
  };
  };
  </script>
<%- include('footer'); -%>