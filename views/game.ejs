<%- include('header') -%>
  <div class="game-home" style="backgound-color: white;">
      <canvas id="canvas" class="game-window"></canvas
  </div>

  
  <script type="text/javascript">
const game = new WebSocket('wss://militiaio.onrender.com/game');
var canvas = document.getElementById('canvas');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
var ctx = canvas.getContext('2d');
ctx.font = "15px Arial";
var size = 10;
let img = new Image();
img.src = "/village.png";


function drawCountryBorder(x, y, color, width=size, height=size, borderSize=size) {
  ctx.globalAlpha = 0.3;
  ctx.fillStyle = color;
  ctx.fillRect(x*borderSize, y*borderSize, width, height);
  ctx.globalAlpha = 1;
};

function rectCollisionDetect(x1, y1, w1, h1, x2, y2, w2, h2) {
    if (x2 > w1 + x1 || x1 > w2 + x2 || y2 > h1 + y1 || y1 > h2 + y2){
        return false;
    } else {
      return true;
    };
};

function drawMap() {
  let maxColumnX = canvas.width/size;
  let maxColumnY = canvas.height/size;
  ctx.strokeStyle = "#bdbdbd";
  for (let y = 0; y < maxColumnY; y++) {
    for (let x = 0; x < maxColumnX; x++) {
      ctx.strokeRect(x*size, y*size, size, size);
    };
  };
};

function battleSimulate(army1, army2) {
  let soldiers = army1.soldiers - army2.soldiers;
  let cavalry = army1.cavalry - army2.cavalry;
  
};


class Player{
  constructor (name, color, x, y){
    if (name.length >= 10){
      name = name.slice(0, 11)+"...";
    };
    this.name = name;
    this.color = color;
    this.radius = size*1.5;
    this.x = x;
    this.y = y;
    this.Xvel = 0;
    this.Yvel = 0;
    this.army = {soldiers: 0, cavalry: 0, archers: 0, order:"sac"};
    this.cities = [];
    this.offset = ctx.measureText(this.name+" - "+(this.army.soldiers+this.army.cavalry/2+this.army.archers/1.5));
    this.offsetHeight = this.offset.actualBoundingBoxAscent + this.offset.actualBoundingBoxDescent;
    this.rectAround = {x: this.x-this.offset.width/2-1, y: this.y-this.radius-1, width: this.offset.width/2+2, height: this.radius*2+this.offsetHeight+2};
  };
  show (){
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);
    ctx.fillStyle = this.color;
    ctx.fill();
    this.offset = ctx.measureText(this.name+" - "+(this.army.soldiers+this.army.cavalry+this.army.archers));
    this.offsetHeight = this.offset.actualBoundingBoxAscent + this.offset.actualBoundingBoxDescent;
    ctx.fillStyle = "black";
    ctx.font = this.radius + "px Arial";
    ctx.fillText(this.name+" - "+(this.army.soldiers+this.army.cavalry+this.army.archers), this.x-this.offset.width/2, this.y+this.offsetHeight+this.radius);
  };
  update (){
    this.offset = ctx.measureText(this.name);
    this.offsetHeight = this.offset.actualBoundingBoxAscent + this.offset.actualBoundingBoxDescent;
    this.x = this.Xvel + this.x;
    this.y = this.Yvel + this.y;
    this.show();
  };
  updateOnline (){
    game.send(this.name+";"+";"+this.x+";"+this.y+";"+this.color+";");
  };
  clear (){
    this.rectAround = {x: this.x-this.offset.width/2-1, y: this.y-this.radius-1, width: this.offset.width+2, height: this.radius*2+this.offsetHeight+2};
    ctx.clearRect(this.rectAround.x, this.rectAround.y, this.rectAround.width, this.rectAround.height);
  };
};

class City{
  constructor (name, x, y){ 
    this.name = name;
    this.x = x;
    this.y = y;
    this.country = 'neutral';
    this.size = size*3;
    this.army = {soldiers: 0, cavalry: 0, archers: 0, order:"asc"};
    this.offset = ctx.measureText(this.name+" - "+(this.army.soldiers+this.army.cavalry/2+this.army.archers/1.5));
    this.offsetHeight = this.offset.actualBoundingBoxAscent + this.offset.actualBoundingBoxDescent;
    this.rectAround = {x: this.x - this.offset.width/2 - 2, y: this.y - 2, width: this.size + this.offset.width + 4, height: this.size + this.offsetHeight + 4};
  };
  show (){
    this.offset = ctx.measureText(this.name+" - "+(this.army.soldiers+this.army.cavalry+this.army.archers));
    this.offsetHeight = this.offset.actualBoundingBoxAscent + this.offset.actualBoundingBoxDescent;
    ctx.drawImage(img, this.x, this.y, this.size, this.size);
    ctx.fillStyle = "black";
    ctx.fillText(this.name+" - "+(this.army.soldiers+this.army.cavalry+this.army.archers), this.x-this.offset.width/2+this.size/2, this.y+this.size+this.offsetHeight);
  };
  clear (){
    ctx.clearRect(this.rectAround.x, this.rectAround.y, this.rectAround.width, this.rectAround.height);
  };
};

var players = [new Player("<%=name%>", "<%=color%>", canvas.width/2, canvas.height/2)];
var cities = [
 new City("Paris", 100*size, 61*size ),
 new City("London", 5*size, 10*size ),
 new City("Rome", 100*size, 10*size ),
 new City("Moscow", 30*size, 50*size ),
 ];
let esc;
img.onload = () => {
  game.addEventListener("open", e => {
    for (player in players){
      players[player].show();
    };
    for (city in cities){
      cities[city].show();
    };
    drawMap();
    loop();
  });
};
function loop() {
  for (player in players){
    players[player].clear();
  };
  for (city in cities){
    cities[city].clear();
  };
  drawMap();
  for (player in players){
    players[player].update();
  };
  for (city in cities){
    cities[city].show();
    let collison = rectCollisionDetect(cities[city].rectAround.x, cities[city].rectAround.y, cities[city].rectAround.width, cities[city].rectAround.height, players[0].rectAround.x, players[0].rectAround.y, players[0].rectAround.width, players[0].rectAround.height);
    if (collison){
      let battle = battleSimulate(cities[city].army, player[0].army);
      
    };
  };
  if (esc !== "Escape"){
    requestAnimationFrame(loop);
  };
};

var velChange = 2;

document.addEventListener("keydown", event => {
  if (event.code === "KeyW" || event.code === "ArrowUp"){
    players[0].Yvel = -velChange;
  };
  if (event.code === "KeyS" || event.code === "ArrowDown"){
    players[0].Yvel = velChange;
  };
  if (event.code === "KeyA" || event.code === "ArrowLeft"){
    players[0].Xvel = -velChange;
  };
  if (event.code === "KeyD" || event.code === "ArrowRight"){
    players[0].Xvel = velChange;
  };
});
document.addEventListener("keyup", event => {
  esc = event.code;
  if (event.code === "KeyW" || event.code === "ArrowUp"){
    players[0].Yvel = 0;
  };
  if (event.code === "KeyS" || event.code === "ArrowDown"){
    players[0].Yvel = 0;
  };
  if (event.code === "KeyA" || event.code === "ArrowLeft"){
    players[0].Xvel = 0;
  };
  if (event.code === "KeyD" || event.code === "ArrowRight"){
    players[0].Xvel = 0;
  };
});
</script>
  <%- include('footer') -%>

