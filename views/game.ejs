<%- include('header') -%>
  <div class="game-home" style="backgound-color: white;">
      <canvas id="canvas" class="game-window"></canvas
  </div>

  
  <script type="text/javascript">
const game = new WebSocket('wss://militiaio.onrender.com/game');
var canvas = document.getElementById('canvas');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
var ctx = canvas.getContext('2d');
ctx.font = "15px Arial";
var size = 10;
let img = new Image();
img.src = "/village.png";

let originalX;
let originalY;
    
function messageDecoder(message){
  let decoded = {name: '', x: 0, y: 0, color: '', s: 0, m: 1, b: 0, e: 1, cities: []};
  let colons = message.split(';');
  decoded.name = colons[0];
  decoded.x = colons[1];
  decoded.y = colons[2];
  decoded.color = colons[3];
  decoded.s = colons[4];
  decoded.m = colons[5];
  decoded.b = colons[6];
  decoded.e = colons[7]
  let cities = colons[8].split('-');
  decoded.cities = cities;
  return decoded;
};

function drawCountryBorder(x, y, color, opacity=0, width=size, height=size, shape='rect', borderSize=size) {
  ctx.globalAlpha = opacity;
  ctx.fillStyle = color;
  if (shape === 'rect'){
    ctx.fillRect(x, y, width, height);
  } else if (shape === 'circle'){
    ctx.beginPath();
    ctx.arc(x+(width/2), y+(height/2), width, 0, 2 * Math.PI);
    ctx.fill();
  };
  ctx.globalAlpha = 1;
};

function battle(defender, attacker){
  let result;
  if (defender.s == 0 && attacker.s == 0){
    return {result: 0, winner: 'draw'};
  } else {
    if (defender.s == 0){
      return {result: attacker.s, winner: 'attacker'};
    } else if (attacker.s == 0){
      return {result: defender.s, winner: 'defender'};
    };
  };
  if (defender.m <= 0 && attacker.m <= 0){
    defender.m = 0;
    attacker.m = 0;
    return {result: 0, winner: 'draw'};
  };
  if (defender.m <= 0){
    defender.m = 0;
  };
  if (attacker.m <= 0){
    attacker.m = 0;
  };
  result = ((defender.s*defender.m*defender.e)-(attacker.s*attacker.m*attacker.e));
  result = Math.floor(result);
  if (result < 0){
    result = {result: -result, winner: 'attacker'};
    defender.s = 0;
    attacker.s = result.result/attacker.m/attacker.e;
  } else if (result > 0){
    result = {result: result, winner: 'defender'};
    attacker.s = 0;
    defender.s = result.result/defender.m/defender.e;
  } else {
    result = {result: 0, winner: 'draw'};
    attacker.s = 0;
    defender.s = 0;
  };
  attacker.s = Math.floor(attacker.s);
  defender.s = Math.floor(defender.s);
  attacker.b += 1;
  defender.b += 1;
  attacker.e += 0.1;
  defender.e += 0.1;
  if (result.winner === 'attacker'){
    defender.m -= 0.1;
    attacker.m += 0.005;
  } else if (result.winner === 'defender'){
    defender.m += 0.1;
    attacker.m -= 0.1;
  } else {
    defender.m -= 0.1;
    attacker.m -= 0.1;
  };
  attacker.e = Math.round(attacker.e * 10) / 10;
  defender.e = Math.round(defender.e * 10) / 10;
  attacker.m = Math.round(attacker.m * 10) / 10;
  defender.m = Math.round(defender.m * 10) / 10;
  return result;
};

function rectCollisionDetect(x1, y1, w1, h1, x2, y2, w2, h2) {
    if (x2 > w1 + x1 || x1 > w2 + x2 || y2 > h1 + y1 || y1 > h2 + y2){
        return false;
    } else {
      return true;
    };
};

function drawMap() {
  let maxColumnX = canvas.width/size;
  let maxColumnY = canvas.height/size;
  ctx.strokeStyle = "#bdbdbd";
  for (let y = 0; y < maxColumnY; y++) {
    for (let x = 0; x < maxColumnX; x++) {
      ctx.strokeRect(x*size, y*size, size, size);
    };
  };
};

var players;
var cities;
let playersName = [];
let mapOffsetX = 0;
let mapOffsetY = 0;
    
class Player{
  constructor (name, color, x, y, army, cities){
    if (name.length > 10){
      name = name.slice(0, 11)+"...";
    };
    this.name = name;
    this.color = color;
    this.radius = size*1.5;
    this.x = x;
    this.y = y;
    this.army = {s: army.s, m: army.m, b: army.b, e: army.e};
    this.cities = cities;
    this.offset = ctx.measureText(this.name+" - "+this.army.s);
    this.offsetHeight = this.offset.actualBoundingBoxAscent + this.offset.actualBoundingBoxDescent;
    this.rectAround = {x: this.x-this.radius-1, y: this.y-this.radius-1, width: this.radius*2+2, height: this.radius*2+7};
    this.coins = 100;
    this.xVel = 0;
    this.yVel = 0;
    playersName.push(this.name);
    this.coinOffset = ctx.measureText("Coins: "+Math.floor(this.coins));
    this.coinOffsetHeight = this.offset.actualBoundingBoxAscent + this.offset.actualBoundingBoxDescent;
  };
  show (){
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);
    ctx.fillStyle = this.color;
    ctx.fill();
    this.offset = ctx.measureText(this.name+" - "+this.army.s);
    this.offsetHeight = this.offset.actualBoundingBoxAscent + this.offset.actualBoundingBoxDescent;
    this.rectAround = {x: this.x-this.radius-1, y: this.y-this.radius-1, width: this.radius*2, height: this.radius*2+7};
    ctx.fillStyle = "black";
    ctx.font = this.radius + "px Arial";
    ctx.fillText(this.name+" - "+this.army.s, this.x-this.offset.width/2, this.y+this.offsetHeight+this.radius);
  };
  update (){
    this.x += this.xVel;
    this.y += this.yVel;
    this.rectAround = {x: this.x-this.radius-1, y: this.y-this.radius-1, width: this.radius*2, height: this.radius*2+7};
    this.offset = ctx.measureText(this.name+" - "+this.army.s);
    this.offsetHeight = this.offset.actualBoundingBoxAscent + this.offset.actualBoundingBoxDescent;
    this.show();
    this.showCoins();
  };
  updateOnline (newX, newY){
    let cities = '';
    this.cities.forEach((city) => {
      cities = cities + city + '-';
    });
    cities = cities.slice(0, -1);
    game.send(this.name+";"+(newX-originalX)+";"+(newY-originalY)+";"+this.color+";"+this.army.s+";"+this.army.m+";"+ this.army.b+";"+this.army.e+";"+cities+";"+"type:gameMessage");
  };
  showCoins(){
    this.coinOffset = ctx.measureText("Coins: "+Math.floor(this.coins));
    this.coinOffsetHeight = this.offset.actualBoundingBoxAscent + this.offset.actualBoundingBoxDescent;
    ctx.fillText("Coins: "+Math.floor(this.coins), this.x-this.coinOffset.width/2, this.y+this.radius+this.offsetHeight+this.coinOffsetHeight+3);
  };
};

class City{
  constructor (name, x, y){ 
    this.name = name;
    this.x = x;
    this.y = y;
    this.country = 'neutral';
    this.size = size*3;
    this.army = {s: 50, m: 1, b: 0, e: 1};
    this.offset = ctx.measureText(this.name+" - "+this.army.s);
    this.offsetHeight = this.offset.actualBoundingBoxAscent + this.offset.actualBoundingBoxDescent;
    this.rectAround = {x: this.x - this.offset.width/2 - 2, y: this.y - 2, width: this.size + this.offset.width + 4, height: this.size + this.offsetHeight + 4};
    this.color = 'white';
    this.coins = 0;
    this.coinsPerTurn = 0.02;
    this.coinOffset = ctx.measureText("Coins: "+Math.floor(this.coins));
    this.coinOffsetHeight = this.offset.actualBoundingBoxAscent + this.offset.actualBoundingBoxDescent;
  };
  show (){
    this.x += mapOffsetX;
    this.y += mapOffsetY;
    this.coins = this.coins + this.coinsPerTurn;
    this.coinOffset = ctx.measureText("Coins: "+Math.floor(this.coins));
    this.coinOffsetHeight = this.offset.actualBoundingBoxAscent + this.offset.actualBoundingBoxDescent;
    this.offset = ctx.measureText(this.name+" - "+this.army.s);
    this.offsetHeight = this.offset.actualBoundingBoxAscent + this.offset.actualBoundingBoxDescent;
    this.rectAround = {x: this.x - this.offset.width/2 - 2, y: this.y - 2, width: this.size + this.offset.width + 4, height: this.size + this.offsetHeight + 4};
    ctx.drawImage(img, this.x, this.y, this.size, this.size);
    ctx.fillStyle = "black";
    ctx.fillText(this.name+" - "+this.army.s, this.x-this.offset.width/2+this.size/2, this.y+this.size+this.offsetHeight);
    ctx.fillText("Coins: "+Math.floor(this.coins), this.x-this.coinOffset.width/2+this.size/2, this.y+this.size+this.offsetHeight+this.coinOffsetHeight+3);
    if (this.country !== 'neutral'){
      drawCountryBorder(this.rectAround.x, this.rectAround.y, this.color, 0.3, this.rectAround.width, this.rectAround.height, 'circle');
    };
  };
  setCountry(country, color){
    this.country = country;
    this.color = color;
    drawCountryBorder(this.rectAround.x, this.rectAround.y, color, 0.3, this.rectAround.width, this.rectAround.height, 'circle');
  };
};
<% if (mode !== 'online'){ %>
players = [new Player("<%=name%>", "<%=color%>", canvas.width/2, canvas.height/3, {s: 100, m: 1, b: 0, e: 1}, []),
          new Player("<%=player2Name%>", "<%=color2%>", canvas.width/2, canvas.height/1.5, {s: 100, m: 1, b: 0, e: 1}, [])];
<% } else { %>
players = [new Player("<%=name%>", "<%=color%>", canvas.width/2, canvas.height/2, {s: 100, m: 1, b: 0, e: 1}, [])];
<% } %>
cities = [
 new City( "Paris", 100*size, 61*size ),
 new City( "London", 5*size, 10*size ),
 new City( "Rome", 100*size, 10*size ),
 new City( "Moscow", 30*size, 50*size ),
 ];
let esc;
img.onload = () => {
  <% if (mode === "online"){ %>
  game.addEventListener("open", e => {
    for (player in players){
      players[player].show();
    };
    for (city in cities){
      cities[city].show();
    };
    originalX = cities[0].x;
    originalY = cities[0].y;  
    loop();
  });
    <% } else { %>
      for (player in players){
      players[player].show();
    };
    for (city in cities){
      cities[city].show();
    };
    originalX = cities[0].x;
    originalY = cities[0].y;  
    loop();
      <% } %>
};
function roundTo(n, digits) {
  if (digits === undefined) {
    digits = 0;
  }

  var multiplicator = Math.pow(10, digits);
  n = parseFloat((n * multiplicator).toFixed(11));
  return Math.round(n) / multiplicator;
};
let turn = 0;
function loop() {
  <% if (mode === 'online'){ %>
  turn += 0.01;
  turn = roundTo(turn, 2);
  if (Number.isInteger(turn)){
    players[0].updateOnline(cities[0].x, cities[0].y);
  };
  <% } %>
  ctx.clearRect(0,0,canvas.width, canvas.height);
  drawMap();
  <% if(mode!== 'online'){%>
    let playerCollision = rectCollisionDetect(players[0].rectAround.x, players[0].rectAround.y, players[0].rectAround.width, players[0].rectAround.height, players[1].rectAround.x, players[1].rectAround.y, players[1].rectAround.width, players[1].rectAround.height);
    if (playerCollision){
      let playerResult = battle(players[0].army, players[1].army);
      if (playerResult.winner === 'attacker'){
        players[0].x = canvas.width/2;
        players[0].y= canvas.height/2;
        players[0].coins += players[1].coins;
        players[1].coins = 0;
      } else {
        players[1].x = canvas.width/2;
        players[1].y= canvas.height/2;
        players[1].coins += players[0].coins;
        players[0].coins = 0;
      };
    };
  
  for (player in players){
    players[player].update();
  for (city in cities){
    cities[city].show();
    let collison = rectCollisionDetect(cities[city].rectAround.x, cities[city].rectAround.y, cities[city].rectAround.width, cities[city].rectAround.height, players[player].rectAround.x, players[player].rectAround.y, players[player].rectAround.width, players[player].rectAround.height);
    if (collison){
      if (cities[city].country !== players[player].name){
        let result = battle(cities[city].army, players[player].army);
        console.log(result.winner);
        if (result.winner === 'attacker'){
          cities[city].setCountry(players[player].name, players[player].color);
          players[player].cities.push(cities[city].name);
          cities[city].coins = 0;
        };
      };
      if (cities[city].country === players[player].name && cities[city].coins > 9 && players[player].coins < 1001){
        players[player].coins += Math.floor(cities[city].coins);
        cities[city].coins = 0;
      };
    };
  };
    };
    <% } else {%>
for (player in players){
    players[player].update();
};
  for (city in cities){
    cities[city].show();
    let collison = rectCollisionDetect(cities[city].rectAround.x, cities[city].rectAround.y, cities[city].rectAround.width, cities[city].rectAround.height, players[0].rectAround.x, players[0].rectAround.y, players[0].rectAround.width, players[0].rectAround.height);
    if (collison){
      if (cities[city].country !== players[0].name){
        let result = battle(cities[city].army, players[0].army);
        console.log(result.winner);
        if (result.winner === 'attacker'){
          cities[city].setCountry(players[0].name, players[0].color);
          players[0].cities.push(cities[city].name);
          cities[city].coins = 0;
        };
      } else if (cities[city].country !== 'neutral' && cities[city].coins > 9 && players[0].coins < 1001){
        players[0].coins += Math.floor(cities[city].coins);
        cities[city].coins = 0;
      };
    };
  };
  
    <% } %>
  if (esc !== "Escape"){
    requestAnimationFrame(loop);
  };
};

var velChange = 2;

game.addEventListener("message", msg => {
  let player = messageDecoder(msg.data);
  console.log(player);
  let i = playersName.indexOf(player.name);
  if (i == -1){
    players.push(new Player(player.name, player.color, players[0].x-player.x, players[0].y-player.y, {s: player.s, m: player.m, b: player.b, e: player.e}, player.cities));
    playersName.push(player.name);
  } else if(players[0].name != player.name){
    players[i+1].x = players[0].x-player.x;
    players[i+1].y = players[0].y-player.y;
  };
});

document.addEventListener("keydown", event => {
  <% if (mode === 'online'){ %>
    if (event.code === "KeyW" || event.code === "ArrowUp"){
      mapOffsetY = velChange;
    };
    if (event.code === "KeyS" || event.code === "ArrowDown"){
      mapOffsetY = -velChange;
    };
    if (event.code === "KeyA" || event.code === "ArrowLeft"){
      mapOffsetX = velChange;
    };
    if (event.code === "KeyD" || event.code === "ArrowRight"){
      mapOffsetX = -velChange;
    };
  <% } else { %>
    if (event.code === "KeyW"){
      players[0].yVel = -velChange;
    };
    if (event.code === "ArrowUp"){
      players[1].yVel = -velChange;
    };
    if (event.code === "KeyS"){
      players[0].yVel = velChange;
    };
    if (event.code === "ArrowDown"){
      players[1].yVel = velChange;
    };
    if (event.code === "KeyA"){
      players[0].xVel = -velChange;
    };
    if (event.code === "ArrowLeft"){
      players[1].xVel = -velChange;
    };
    if (event.code === "KeyD"){
      players[0].xVel = velChange;
    };
    if (event.code === "ArrowRight"){
      players[1].xVel = velChange;
    };
  <% } %>
});
document.addEventListener("keyup", event => {
  esc = event.code;
  <% if (mode === 'online'){ %>
  if (event.code === "KeyW" || event.code === "ArrowUp"){
    mapOffsetY = 0;
  };
  if (event.code === "KeyS" || event.code === "ArrowDown"){
    mapOffsetY = 0;
  };
  if (event.code === "KeyA" || event.code === "ArrowLeft"){
    mapOffsetX = 0;
  };
  if (event.code === "KeyD" || event.code === "ArrowRight"){
    mapOffsetX = 0;
  };
  if (event.code === 'Space'){
    if (players[0].coins - 10 >= 0){
      players[0].coins -= 10;
      players[0].army.s += 10;
      players[0].army.e = (players[0].army.e+1)/2;
      players[0].army.m = (players[0].army.m+1)/2;
    };
  };
    <% } else { %>
    if (event.code === "KeyW"){
      players[0].yVel = 0;
    };
    if (event.code === "ArrowUp"){
      players[1].yVel = 0;
    };
    if (event.code === "KeyS"){
      players[0].yVel = 0;
    };
    if (event.code === "ArrowDown"){
      players[1].yVel = 0;
    };
    if (event.code === "KeyA"){
      players[0].xVel = 0;
    };
    if (event.code === "ArrowLeft"){
      players[1].xVel = 0;
    };
    if (event.code === "KeyD"){
      players[0].xVel = 0;
    };
    if (event.code === "ArrowRight"){
      players[1].xVel = 0;
    };
    if (event.code === 'KeyC'){
    if (players[0].coins - 10 >= 0){
      players[0].coins -= 10;
      players[0].army.s += 10;
      players[0].army.e = (players[0].army.e+1)/2;
      players[0].army.m = (players[0].army.m+1)/2;
    };
  };
    if (event.code === 'KeyM'){
    if (players[1].coins - 10 >= 0){
      players[1].coins -= 10;
      players[1].army.s += 10;
      players[1].army.e = (players[1].army.e+1)/2;
      players[1].army.m = (players[1].army.m+1)/2;
    };
  };
    <% } %>
});
</script>
  <%- include('footer') -%>

